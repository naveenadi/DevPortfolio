---
---

<button id="themeToggle" aria-label="Toggle dark mode">
  <svg width="20" height="20" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <!-- Sun icon -->
    <path class="sun" fill-rule="evenodd" d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm0-16a1 1 0 0 1 1 1v2a1 1 0 1 1-2 0V4a1 1 0 0 1 1-1zm0 15a1 1 0 0 1 1 1v2a1 1 0 1 1-2 0v-2a1 1 0 0 1 1-1zm7.071-12.071a1 1 0 0 1 0 1.414l-1.414 1.414a1 1 0 1 1-1.414-1.414l1.414-1.414a1 1 0 0 1 1.414 0zM6.343 17.657a1 1 0 0 1 0 1.414l-1.414 1.414a1 1 0 1 1-1.414-1.414l1.414-1.414a1 1 0 0 1 1.414 0zM4 12a1 1 0 0 1-1 1H1a1 1 0 1 1 0-2h2a1 1 0 0 1 1 1zm19 0a1 1 0 0 1-1 1h-2a1 1 0 1 1 0-2h2a1 1 0 0 1 1 1zM6.343 6.343a1 1 0 0 1-1.414 0L3.515 4.93a1 1 0 0 1 1.414-1.414l1.414 1.414a1 1 0 0 1 0 1.414zm12.728 12.728a1 1 0 0 1-1.414 0l-1.414-1.414a1 1 0 0 1 1.414-1.414l1.414 1.414a1 1 0 0 1 0 1.414z"/>
    <!-- Moon icon -->
    <path class="moon" fill-rule="evenodd" d="M12.97 3a9 9 0 1 0 8.03 8.03 7 7 0 0 1-8.03-8.03z"/>
  </svg>
</button>

<style>
  #themeToggle {
    border: 0;
    background: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 50%;
    transition: background-color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  #themeToggle:hover {
    background-color: var(--light-gray);
  }

  .sun {
    fill: var(--primary-color);
    opacity: 1;
    transition: fill 0.3s ease, opacity 0.3s ease;
  }

  .moon {
    fill: transparent;
    opacity: 0;
    transition: fill 0.3s ease, opacity 0.3s ease;
  }

  :global(.dark-theme) .sun {
    fill: transparent;
    opacity: 0;
  }

  :global(.dark-theme) .moon {
    fill: var(--primary-color);
    opacity: 1;
  }
</style>

<script>
  // Check for saved theme preference or use OS preference
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  })();

  // Apply the theme
  if (theme === 'dark') {
    document.documentElement.classList.add('dark-theme');
  } else {
    document.documentElement.classList.remove('dark-theme');
  }

  // Set up the toggle
  const handleToggleClick = () => {
    const element = document.documentElement;
    element.classList.toggle('dark-theme');
    
    const isDark = element.classList.contains('dark-theme');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    
    // Force repaint to ensure icon changes properly
    const toggle = document.getElementById('themeToggle');
    toggle.style.display = 'none';
    setTimeout(() => toggle.style.display = '', 5);
  }

  // Add event listener after DOM is fully loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      document.getElementById('themeToggle').addEventListener('click', handleToggleClick);
    });
  } else {
    document.getElementById('themeToggle').addEventListener('click', handleToggleClick);
  }
</script>